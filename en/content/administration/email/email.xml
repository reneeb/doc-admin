<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="email">
<title>Sending/Receiving emails</title>

<section id="email-sending">
<title>Sending emails</title>

<section id="email-sending-sendmail">
<title>Via Sendmail (default)</title>

<para>
OTRS can send out emails via <ulink url="http://www.sendmail.org/">Sendmail</ulink>, <ulink url="http://www.postfix.org/">Postfix</ulink>, <ulink url="http://www.qmail.org">Qmail</ulink> or <ulink url="http://www.exim.org">Exim</ulink>. The default configuration is to use Sendmail and should work out-of-the-box.
</para>

<para>
You can configure the sendmail settings via the graphical configuration frontend (Framework::Core::Sendmail)
</para>

</section>

<section id="email-sending-smtp">
<title>Via SMTP server or smarthost</title>

<para>
OTRS can send emails via SMTP (<ulink url="http://www.ietf.org/rfc/rfc821.txt">Simple Mail Transfer Protocol / RFC 821</ulink>) or Secure SMTP.
</para>

<para>
The SMTP server settings can be configured via the SysConfig (Framework::Core::Sendmail). If you don't see SMTPS available as an option, the required Perl modules are missing. In that case, please refer to <link linkend="installation-of-perl-modules">"Installation of Perl modules required for OTRS"</link> for instructions.
</para>

</section>

</section>

<section id="email-receiving">
<title>Receiving emails</title>

<section id="email-receiving-pop3">
<title>Mail accounts configured via the OTRS GUI</title>

<para>
OTRS is able to receive emails from POP3, POP3S, IMAP and IMAPS mail accounts.
</para>

<para>
Configure your mail accounts via the "PostMaster Mail Accounts" link on the Admin page.
</para>

<para>
If a new mail account is to be created (see Figure below), then its mail server name, login name and password must be specified. Also, you need to select the mail server type, which can be POP3, POP3S, IMAP or IMAPS. If you don't see your server type available as an option, the required Perl modules are missing on your system. In that case, please refer to <link linkend="installation-of-perl-modules"> "Installation of Perl modules required for OTRS"</link> for instructions.</para>

<para>
<figure>
    <title>Adding a mail account</title>
    <screenshot>
         <graphic scale="40" fileref="screenshots/add-mailaccount.png"></graphic>
    </screenshot>
</figure>
</para>

<para>If you select Yes for the value of the Trusted option, any X-OTRS headers attached to an incoming message are evaluated and executed. Because the X-OTRS header can execute some actions in the ticket system, you should set the Trusted option to Yes only for known senders. X-OTRS-Headers are used by the <link linkend="adminarea-postmasterfilter">filter module</link> in OTRS. The X-OTRS headers are explained <link linkend="table-of-x-otrs-headers">in this table</link> in more detail. Any postmaster filter rules created are executed, irrespective of the Trusted option's setting.
</para>

<para>
The distribution of incoming messages can be controlled if they need to be sorted by queue or by the content of the "To:" field. For the Dispatching field, if "Dispatching by selected queue" is selected, all incoming messages will be sorted into the specified queue. The address where the mail was sent to is disregarded in this case. If "Dispatching by email To: field" is selected, the system checks if a queue is linked with the address in the To: field of the incoming mail. You can link an address to a queue in the <link linkend="adminarea-emailaddresses">E-mail address management</link> section of the Admin page. If the address in the To: field is linked with a queue, the new message will be sorted into the linked queue. If no link is found between the address in the To: field and any queue, then the message flows into the "Raw" queue in the system, which is the <link linkend="ConfigReference_Ticket:Core::PostMaster:PostmasterDefaultQueue">PostmasterDefaultQueue</link> after a default installation.
</para>

<para>
All data for the mail accounts are saved in the OTRS database. The <filename>bin/otrs.Console.pl Maint::PostMaster::MailAccountFetch</filename> command uses the settings in the database and fetches the mail. You can execute it manually to check if all your mail settings are working properly.
</para>

<para>
On a normal installation, the mail will be fetched every 10 minutes by the OTRS Daemon.
</para>

<note>
<para>
When fetching mail, OTRS deletes the mail from the POP or IMAP server. There is no option to also keep a copy on the server. If you want to retain a copy on the server, you should create forwarding rules on your mail server. Please consult your mail server documentation for details.
</para>
</note>
</section>


<section id="email-receiving-cmd">
<title>Via command line program and procmail (otrs.Console.pl Maint::PostMaster::Read)</title>

<para>
If you cannot use mail accounts to get the email into OTRS, the command line program <filename>bin/otrs.Console.pl Maint::PostMaster::Read</filename> might be a way around the problem. It takes the mails via STDIN and pipes them directly into OTRS. That means email will be available in your OTRS system if the MDA (mail delivery agent, e.g. procmail) executes this program.
</para>

<para>
To test <filename>bin/otrs.Console.pl Maint::PostMaster::Read</filename> without an MDA, execute the command of the following script.
</para>

<para>
<screen>
linux:/opt/otrs# cd bin
linux:/opt/otrs/bin# cat ../doc/sample_mails/test-email-1.box | ./otrs.Console.pl Maint::PostMaster::Read
linux:/opt/otrs/bin#
</screen>
</para>

<para>
<emphasis>Script: Testing PostMaster without the MDA.</emphasis>
</para>

<para>
If the email is shown in the QueueView, then your setup is working.
</para>

<example id='procmail-queue-routing'>

<title>Routing via procmail using otrs.Console.pl</title>

<para>
In order to route mails in a specific queue using otrs.Console.pl use the following example.
</para>

<para>
<screen><![CDATA[
| $SYS_HOME/bin/otrs.Console.pl Maint::PostMaster::Read --target-queue=QUEUENAME
]]></screen>
</para>

<para>
When sorting to a subqueue, you must seperate the parent and child queue "::".
</para>

<para>
<screen><![CDATA[
| $SYS_HOME/bin/otrs.Console.pl Maint::PostMaster::Read --target-queue=QUEUENAME::SUBQUEUE
]]></screen>
</para>

</example>

<para>
Procmail is a very common e-mail filter in Linux environments. It is installed on most systems. If not, have a look at the <ulink url="http://www.procmail.org/"><citetitle>procmail homepage</citetitle></ulink>.
</para>

<para>
To configure procmail for OTRS (based upon a procmail configured MTA such as sendmail, postfix, exim or qmail), use the
<filename>~otrs/.procmailrc.dist</filename> file and copy it to <filename>.procmailrc</filename> and add the lines of the script below.
</para>

<para>
<programlisting>
SYS_HOME=$HOME
PATH=/bin:/usr/bin:/usr/local/bin
# --
# Pipe all email into the PostMaster process.
# --
:0 :
| $SYS_HOME/bin/otrs.Console.pl Maint::PostMaster::Read
</programlisting>
</para>

<para>
<emphasis>Script: Configuring procmail for OTRS.</emphasis>
</para>

<para>
All email sent to the local OTRS user will be piped into <filename>bin/otrs.Console.pl Maint::PostMaster::Read</filename> and then shown in your QueueView.
</para>

</section>

<section id="email-receiving-fetchmail">
<title>Fetching emails via POP3 or IMAP and fetchmail for otrs.Console.pl Maint::PostMaster::Read</title>

<para>
In order to get email from your mail server, via a POP3 or IMAP mailbox, to the OTRS machine/local OTRS account and to procmail, use <ulink url="http://www.fetchmail.info//">fetchmail</ulink>.
</para>

<note>
<para>
A working SMTP configuration on the OTRS machine is required.
</para>
</note>

<para>
You can use the <filename>.fetchmailrc.dist</filename> in the home directory of OTRS and copy it to <filename>.fetchmailrc</filename>. Modfiy/change it for your needs (see the Example below).
</para>

<example id='fetchmailrc'>
<title>.fetchmailrc</title>

<para>
<programlisting>
#poll (mailserver) protocol POP3 user (user) password (password) is (localuser)
poll mail.example.com protocol POP3 user joe password mama is otrs
</programlisting>
</para>

</example>

<para>
Don't forget to set the <filename>.fetchmailrc</filename> to 710 ("chmod 710 .fetchmailrc")!
</para>

<para>
With the <filename>.fetchmailrc</filename> from the Example above, all email will be forwarded to the local OTRS account, if the command <command>fetchmail -a</command> is executed. Set up a cronjob with this command if you want to fetch the mails regularly.
</para>
</section>


<section id="email-receiving-filter">
<title>Filtering/dispatching by OTRS/PostMaster modules (for more complex dispatching)</title>

<para>
If you use the <filename>bin/otrs.Console.pl Maint::PostMaster::Read</filename> or <filename>bin/otrs.Console.pl Maint::PostMaster::MailAccountFetch</filename> method, you can insert or modify X-OTRS header entries with the PostMaster filter modules. With the X-OTRS headers, the ticket system can execute some actions on
incoming mails, sort them into a specific queue, change the priority or change the customer ID, for example. More information about the X-OTRS headers are available in the section about <link linkend="adminarea-postmasterpop3-account">adding mail accounts</link> from the OTRS Admin page.
</para>

<para>
There are some default filter modules:
</para>

<note>
<para>
The job name (e.g. $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'JobName'}) needs to be unique!
</para>
</note>

<para>
Kernel::System::PostMaster::Filter::Match is a default module to match on some email header (e.g. From, To, Subject, ...). It can set new email headers (e.g. X-OTRS-Ignore: yes or X-OTRS-Queue: spam) if a filter rule matches. The jobs of the Example below can be inserted in <filename>Kernel/Config.pm</filename>
</para>

<example id='filter-module-match-example'>
<title>Example jobs for the filter module Kernel::System::PostMaster::Filter::Match</title>

<para>
<programlisting>
    # Job Name: 1-Match
    # (block/ignore all spam email with From: noreply@)
    $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'1-Match'} = {
        Module =&gt; 'Kernel::System::PostMaster::Filter::Match',
        Match =&gt; {
            From =&gt; 'noreply@',
        },
        Set =&gt; {
            'X-OTRS-Ignore' =&gt; 'yes',
        },
    };
    # Job Name: 2-Match
    # (sort emails with From: sales@example.com and Subject: **ORDER**
    # into queue 'Order')
    $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'2-Match'} = {
        Module =&gt; 'Kernel::System::PostMaster::Filter::Match',
        Match =&gt; {
            To =&gt; 'sales@example.com',
            Subject =&gt; '**ORDER**',
        },
        Set =&gt; {
            'X-OTRS-Queue' =&gt; 'Order',
        },
    };
</programlisting>
</para>

</example>

<para>
Kernel::System::PostMaster::Filter::CMD is a default module to pipe the email into an external command. The output is given to STDOUT and if the result is true, then set new email header (e.g. X-OTRS-Ignore: yes or X-OTRS-Queue: spam). The Example below can be used in <filename>Kernel/Config.pm</filename>
</para>

<example id='filter-module-cmd-example'>
<title>Example job for the filter module Kernel::System::PostMaster::Filter::CMD</title>

<para>
<programlisting>
    # Job Name: 5-SpamAssassin
    # (SpamAssassin example setup, ignore spam emails)
    $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'5-SpamAssassin'} = {
        Module =&gt; 'Kernel::System::PostMaster::Filter::CMD',
        CMD =&gt; '/usr/bin/spamassassin | grep -i "X-Spam-Status: yes"',
        Set =&gt; {
            'X-OTRS-Ignore' =&gt; 'yes',
        },
    };
</programlisting>
</para>

</example>

<para>
    Kernel::System::PostMaster::Filter::ExternalTicketNumberRecognition is a default module that
    adds the possibility to parse external identifiers, in the email subject, the body or both using
    regular expressions. It then stores this value in a defined dynamic field. When an email comes
    in, OTRS will first search for an external identifier and when it finds one, query OTRS on the
    pre-defined dynamic field. If it finds an existing ticket, it will update this ticket,
    otherwise it will create a new ticket with the external reference number in the separate field.
</para>
<para>
    OTRS SysConfig already provide 4 different settings to setup different external ticket numbers.
    If more settings are needed they need to be added manually. The following example can be
    used in <filename>Kernel/Config.pm</filename> to extend SysConfig settings.
</para>

<example id='filter-module-externalticketrecognition-example'>
    <title>
        Example job for the filter module
        Kernel::System::PostMaster::Filter::ExternalTicketNumberRecognition
    </title>

    <programlisting language="Perl"><![CDATA[
    # Job Name: ExternalTicketNumberRecognition
    # External Ticket Number Reconition, check for Incident-<number> in incoming mails subject and
    # body from the addeesses <sender>@externalticket.com, if number is found it will be stored in
    # the dynamic field 'ExternalNumber' (that need to be setup in the Admin Panel).
    $Self->{'PostMaster::PreFilterModule'}->{'000-ExternalTicketNumberRecognition'} = {
        'FromAddressRegExp' => '\\s*@externalticket.com',
        'NumberRegExp'      => 'Incident-(\\d.*)',
        'SearchInSubject'   => '1',
        'SearchInBody'      => '1',
        'TicketStateTypes'  => 'new;open'
        'DynamicFieldName'  => 'ExternalNumber',
        'Module'            => 'Kernel::System::PostMaster::Filter::ExternalTicketNumberRecognition',
        'Name'              => 'Test External Ticket Number',
        'SenderType'        => 'system',
    };
    ]]></programlisting>
</example>

<itemizedlist mark="round">
    <para><emphasis>Configuration Options</emphasis></para>
    <listitem>
        <para>FromAddressRegExp</para>
        <para>
            This is an optional setting. Only mails matching this "From:" address will be considered
            for this filter. You can adjust this setting to the sender address your external system
            uses for outgoing mails. In case this address can differ, you can set this option to
            empty. OTRS will in that case not check the sender address.
        </para>
    </listitem>
    <listitem>
        <para>NumberRegExp</para>
        <para>
            This is a mandatory setting. This setting contains the regular expression OTRS will use
            to extract the ticket number out of the subject and/or ticket body. The default regular
            expression will match occurrences of for example 'Incident-12354' and will put the part
            between parentheses in the dynamic field field, in this case '12354'.
        </para>
    </listitem>
    <listitem>
        <para>SearchInSubject</para>
        <para>If this is set to '1', the email subject is searched for a ticket number.</para>
    </listitem>
    <listitem>
        <para>SearchInBody</para>
        <para>If this is set to '1', the email body is searched for a ticket number.</para>
    </listitem>
    <listitem>
        <para>TicketStateTypes</para>
        <para>
            This is an optional setting. If given, it will search OTRS only for open external
            tickets of given state types. The state types are separated with semicolons.
        </para>
    </listitem>
    <listitem>
        <para>DynamicField</para>
        <para>
            This is a required setting. It defines the dynamic filed that is used to store the
            external number (the field name must exist in the system and has to be valid).
        </para>
    </listitem>
    <listitem>
        <para>SenderType</para>
        <para>This defines the sender type used for the articles created in OTRS.</para>
    </listitem>
</itemizedlist>

<para>
Of course it's also possible to develop your own PostMaster filter modules.
</para>

</section>

<section id="email-filter-troubleshooting">
    <title>Troubleshooting Email Filtering</title>
    <para>This section shows some common issues and things to consider when troubleshooting Postmaster filters.</para>
    <itemizedlist>
        <listitem>
            <para>The filters are worked in order of their alphabetically sorted filter names.The last filter wins for a certain field to be set, when the criteria matches twice.</para>
        </listitem>
        <listitem>
            <para>"Stop After Match" can prevent a second match.</para>
        </listitem>
        <listitem>
            <para>Make sure the regular expression is valid.</para>
        </listitem>
        <listitem>
            <para>Headers can be set as to control OTRS, but are not written in the mail itself.</para>
        </listitem>
        <listitem>
            <para>When matching one From, CC, TO, use EMAILADDRESS: &lt;your@address&gt;</para>
        </listitem>
        <listitem>
            <para>The Mailbox must be trusted.</para>
        </listitem>
        <listitem>
            <para>The match criteria are AND conditions.</para>
        </listitem>
        <listitem>
            <para>Ticket properties can not be matched by the postmaster filter.</para>
        </listitem>
    </itemizedlist>
</section>

</section>

</section>
